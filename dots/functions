#!/bin/bash
# shellcheck source=/dev/null

new-alias() {
	local last_cmd
	# shellcheck disable=SC2001
	last_cmd=$(history | tail -n2 | head -n1 | sed 's/[0-9]* //')
	echo alias "$1='""$last_cmd""'" >>~/.new_aliases
	source "$HOME/.new_aliases"
}

extract() {
	if [ -f "$1" ]; then
		case $1 in
		*.tar.bz2) tar xvjf "$1" ;;
		*.tar.gz) tar xvzf "$1";;
		*.bz2) bunzip2 "$1" ;;
		*.rar) unrar x "$1" ;;
		*.gz) gunzip "$1" ;;
		*.tar) tar xvf "$1" ;;
		*.tbz2) tar xvjf "$1" ;;
		*.tgz) tar xvzf "$1" ;;
		*.zip) unzip "$1" ;;
		*.Z) uncompress "$1" ;;
		*.7z) 7za x "$1" ;;
		*) echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

checkkernel() {
	MSG="\e[1m\e[5m\e[31mALERT! \e[25mReboot system to apply crucial security updates.\e[0m"
	if [ -f /var/run/reboot-required ]; then
		echo -e "$MSG"
	fi
	if [ "$(rpm -q --last kernel | perl -pe 's/^kernel-(\S+).*/$1/' | head -1)" != "$(uname -r)" ]; then
		echo -e "$MSG"
	fi
}

todo() {
	if [ "$(date +%H)" -gt 18 ] || [ "$(date +%u)" -gt 5 ]; then
		# After work don't display TODO list
		return
	fi
	if [ -f "$HOME/Notes/TODO" ]; then
		echo -en "\e[1m\e[32m"
		echo "Things to do in next days:"
		echo -en "\e[0m\e[33m"
		cat "$HOME/Notes/TODO"
		echo -en "\e[0m"
	fi
}

todoedit() {
	vim "$HOME/Notes/TODO"
}

picsort() {
  # exiftool -ext jpg '-FileName<CreateDate' -d %Y_%m_%d__%H_%M_%S%%-c.%%e .
  exiftool -d %Y-%m-%d-%H%M_%%f.%%e -ext jpg "-filename<datetimeoriginal" .
  exiftool -d %Y-%m-%d-%H%M_%%f.%%e -ext jpeg "-filename<datetimeoriginal" .
  #X=1
  #for i in *; do
  #  # mv "$i" "$(printf %04d.%s ${X%.*} "${i##*.}")"
  #  mv "$i" "$(printf %04d%s ${X%.*} "_${i}")"
  #  X="$((X+1))"
  #done
}

function monitor() {
	local COMMAND="xrandr --output eDP1 --mode 1920x1080 "
	case "$1" in
	"lg") PARAMS="--output DP1 --mode 3440x1440 --right-of eDP1" ;;
	"projector") PARAMS="--output HDMI1 --mode 1920x1080 --right-of eDP1" ;;
	*) PARAMS="--output DP1 --off --output HDMI1 --off" ;;
	esac
	
	echo "Setting up screens configuration"
	eval "${COMMAND} ${PARAMS}"
	echo "Re-applying screen configuration in 5 second..."
	sleep 5
	eval "${COMMAND} ${PARAMS}"
}
complete -W "projector lg reset" monitor

function buildx-init() {
	docker run --rm --privileged docker/binfmt:820fdd95a9972a5308930a2bdfb8573dd4447ad3
	docker buildx create --name mybuilder --use
	docker buildx inspect --bootstrap
}

function buildx-cross() {
	local image=${1}
	for arch in amd64 arm64 arm; do
		docker buildx build --platform linux/${arch} -t "${image}-${arch}" --load .
		docker push "${image}-${arch}"
	done
	manifest-tool push from-args --platforms linux/amd64,linux/arm64,linux/arm  --template "${image}-ARCH" --target "${image}"
}

function image-reupload() {
	local src=${1}
	local dst=${2}

	docker pull "${src}"
	docker tag "${src}" "${dst}"
	docker push "${dst}"
}

function image-manifest() {
	local img="${1}"
	docker manifest create -a "${img}" "${img}-amd64" "${img}-arm64" "${img}-arm"
	for arch in amd64 arm64 arm; do
		docker manifest annotate --arch "$arch" "${img}" "${img}-$arch"
	done
	docker manifest push "${img}"
}

# TODO: Check if still needed. Consider moving to kube-prometheus or tobs
wrap() {
local where="${1}"
local name="${2}"
	
cat << EOF
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    prometheus: k8s
    role: alert-rules
  name: ${name}
  namespace: monitoring
spec:
$(sed 's/^/  /' < "${where}")
EOF
}

diffyaml() {
  yamldiff --file1 "${1}" --file2 "${2}"
}

# TODO: Improve and move to prometheus-operator repo
e2e() {
	if [ "$(basename "$(pwd)")" != "prometheus-operator" ]; then
		echo "Not in prometheus-operator directory"
		return
	fi
	kind delete cluster
	kind create cluster
	export KUBECONFIG
	KUBECONFIG="$(kind get kubeconfig-path)"
	make image
	for n in "operator" "config-reloader"; do
		kind load docker-image "quay.io/coreos/prometheus-$n:$(git rev-parse --short HEAD)"
	done
	until [ "$(kubectl get pods -n kube-system --field-selector=status.phase==Running | wc -l )" -eq 9 ]; do
		echo "Waiting for cluster to finish bootstraping"
		sleep 5
	done
	make test-e2e
}

# OpenShift specific
function clusterbot() {
	local file
	#shellcheck disable=SC2012,SC2086
	file=$(ls -t ${HOME}/Downloads/cluster-bot-*.kubeconfig.txt | head -n1)
	if [ "$file" == "" ]; then
		echo "clusterbot kubeconfig file not found"
	else
		mv "$file" "$HOME/.kube/config.clusterbot"
		export KUBECONFIG="$HOME/.kube/config.clusterbot"
		kubectl get clusterversion
		export KUBECTL_NAMESPACE="openshift-monitoring"
	fi
}
